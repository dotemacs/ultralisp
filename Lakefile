#|-*- mode:lisp -*-|#
;; (in-package :cl-user)
(ql:quickload :cl-interpol)

(defpackage :lake.user
  (:use :cl :lake :cl-syntax)
  (:shadowing-import-from :lake
                          :directory))
(in-package :lake.user)

(named-readtables:in-readtable :interpol-syntax)


(defun search-version-in-changelog (lines)
  (let* ((line (nth 4 lines))
         (space-pos (position #\Space line)))
    (when space-pos
      (subseq line 0 space-pos))))


(defun get-current-version ()
  (uiop:read-file-line "ChangeLog.rst" :at #'search-version-in-changelog))


;; (defvar tag #?"40ants/ultralisp:${(get-current-version)}")
(defvar app-tag #?"ghcr.io/ultralisp/sbcl-app:${(get-current-version)}")
(defvar worker-tag #?"ghcr.io/ultralisp/sbcl-worker:${(get-current-version)}")
(defvar lw-worker-tag #?"ghcr.io/ultralisp/lw-worker:${(get-current-version)}")


(task "version" ()
      (format t #?"Current-version: ${(get-current-version)}~%Docker tag: ${app-tag}~%"))


(task "build" ()
      (sh #?"docker build --target sbcl-app -t ${app-tag} .")
      (sh #?"docker build --target sbcl-worker -t ${worker-tag} .")
      (sh #?"docker build --target lw-worker -t ${lw-worker-tag} ."))


;; TODO: remove CL_SOURCE_REGISTRY before release
(task "build-worker" ()
      (sh #?"CL_SOURCE_REGISTRY=~/common-lisp// qlot exec ros -L sbcl build ./worker.ros"))

(task "push" ("build")
      (sh #?"docker push ${app-tag}")
      (sh #?"docker push ${worker-tag}")
      (sh #?"docker push ${lw-worker-tag}"))

(file "qlfile.lock" ("qlfile")
      (sh "qlot update"))

(file ".qlot/log4sly-setup.el" ("qlfile.lock")
      (sh "qlot exec ros run -e '(ql:quickload :log4sly)' -e '(log4sly:install)' -e '(uiop:quit)'"))

(task "log4sly" (".qlot/log4sly-setup.el")
      )

(defun build-deps-file ()
  ;; Or you can use (gen-deps-system:generate "app" :except (list "ultralisp" "asdf"))
  ;; in the REPL:
  (sh "CL_SOURCE_REGISTRY=`pwd` qlot exec ros run --eval '(ql:quickload :ultralisp)' --eval '(uiop:quit)'")
  (sh "CL_SOURCE_REGISTRY=`pwd` qlot exec gen-deps-system --except ultralisp,asdf ultralisp"))

(task "deps" ("qlfile.lock")
      ;; Here you need to install gen-deps-system using this command
      ;; ros install 40ants/gen-deps-system
      #+darwin
      (sh "arch -x86_64 /usr/local/bin/brew install libev")

      #-darwin
      (sh "sudo apt-get install -y libev-dev")

      (unless (zerop (nth-value 2 (uiop:run-program "which gen-deps-system"
                                                    :ignore-error-status t)))
        (sh "ros install 40ants/gen-deps-system"))
      
      (build-deps-file))

(task "deps-only" ()
      "This command does not updates qlfile.lock and runs faster than just \"lake deps\"."
      (build-deps-file))

(task ("devserver" build) ()
      (when build
        (execute "build-devserver"))
      
      (sh "docker compose up --abort-on-container-exit app"))

(task "build-devserver" ("deps")
      (sh "docker compose build app")
      (sh "docker compose build worker"))

(task "dump-db" ()
      (sh "docker compose run --rm db-ops dump"))

(task "restore-db" ()
      (sh "docker stop ultralisp_app ultralisp_worker")
      (sh "docker compose run --rm db-ops restore"))

(task "generate-migration" ()
      (sh "docker compose rm --stop --force empty-postgres")
      (sh "docker compose build mito")
      (sh "docker compose run --rm mito generate-migration"))

(task "migrate" ()
      (sh "docker compose run --rm mito migrate"))

(task "dbshell" ()
  (sh "docker exec -ti ultralisp_db psql 'user=ultralisp'")
  ;; For some reaseon this does not work with postgresl running in the docker
  ;; despite that connection from lisp can be established:
  ;; (sh "psql postgresql://ultralisp:ultralisp@localhost")
  )

(task "dbshell-prod" ()
  (let ((*ssh-host* "sailfish"))
    (ssh "docker exec -ti ultralisp_db psql 'user=ultralisp'")))

(task "dump-prod-db" ()
  (let ((*ssh-host* "sailfish"))
    (ssh "docker exec -ti ultralisp_db pg_dump 'user=ultralisp' | bzip2 > db-$(date '+%Y%m%d').sql.bz2 && ln -f -s db-$(date '+%Y%m%d').sql.bz2 db-latest.sql.bz2")

  (sh "scp sailfish:db-$(date '+%Y%m%d').sql.bz2 db/dumps/prod/")
))

(task "pull-db-from-prod" ()
  ;; (sh "scp sailfish:db-$(date '+%Y%m%d').sql.bz2 db/dumps/prod/")
  (ignore-errors
   (sh "psql postgresql://ultralisp:ultralisp@localhost -c 'DROP DATABASE ultralisp_prod'"))
  (sh "psql postgresql://ultralisp:ultralisp@localhost -c 'CREATE DATABASE ultralisp_prod'")
  (sh "pv db/dumps/prod/db-$(date '+%Y%m%d').sql.bz2 | bzcat | psql postgresql://ultralisp:ultralisp@localhost/ultralisp_prod"))

(task "build-packages-extractor" ()
      (sh "qlot exec ros run --eval '(asdf:make :packages-extractor)'"))

(task "lint" ()
      (sh "qlot exec sblint ultralisp.asd ultralisp-test.asd"))

(task "stop" ()
  (loop for container in '("ultralisp_app"
                           "ultralisp_worker"
                           "ultralisp_empty_db"
                           "ultralisp_elastic"
                           "ultralisp_db"
                           "ultralisp_gearman")
            do (ignore-errors
                (sh #?"docker stop ${container}"))))

(task "build-images" ()
      (sh "/usr/bin/dot docs/images/architecture.dot -Tpng > docs/images/architecture.png"))

(task "default" ("devserver")
      ())
